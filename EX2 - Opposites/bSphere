class BumpySphere {
    constructor(x, y, z, radius) {
        this.pos = createVector(x, y, z);
        this.bumpiness = 0;
        this.thetaValue = 0;
        this.phyValue = 0;
        this.r = radius;
        this.rotation = random(-0.1, 0.1);

        this.isMelting = false;

        this.destBump;
        this.destTheta;
        this.destPhy;
    }

    display() {
        push();
        translate(this.pos.x, this.pos.y, this.pos.z);
        if (!this.isMelting)
            rotateX(this.rotation);
        rotateY(this.rotation);

        /*
        Shape building taken from Kazuki Umeda 
        Video Tutorial: https://www.youtube.com/watch?v=SGHWZz5Mrsw
        Git: https://github.com/Creativeguru97/YouTube_tutorial/blob/master/Play_with_geometry/SphericalCoordinates/0_4_bumpySphere/sketch.js
        ----------------------------------------
        */
        beginShape(POINTS);
        for (let theta = 0; theta < 180; theta += 2) {
            for (let phy = 0; phy < 360; phy += 2) {
                let x = this.r * (1 + this.bumpiness * sin(this.thetaValue * theta) * sin(this.phyValue * phy)) * sin(1 * theta) * cos(phy);
                let y = this.r * (1 + this.bumpiness * sin(this.thetaValue * theta) * sin(this.phyValue * phy)) * sin(1 * theta) * sin(phy);
                let z = this.r * (1 + this.bumpiness * sin(this.thetaValue * theta) * sin(this.phyValue * phy)) * cos(1 * theta);
                vertex(x, y, z);
            }
        }
        endShape();
        pop();
    }

    setPosition(x, y, z) {
        this.pos.set(x, y, z);
    }

    setSize(size) {
        this.size = size;
    }

    update() {
        if (this.isMelting) {

            let distancFromMouse = dist(this.pos.x, this.pos.y, mouseX, mouseY);
            
            let width = this.r *5;
            this.destBump = map(distancFromMouse, 0, width, 0, 0.8);
            this.destTheta = map(distancFromMouse, 0, width, 0, 8);
            this.destPhy = map(distancFromMouse, 0, width, 0, 2);

            this.bumpiness = lerp(Math.min(this.bumpiness, this.destBump), Math.max(this.bumpiness, this.destBump), 0.01);
            this.thetaValue = lerp(Math.min(this.thetaValue, this.destTheta), Math.max(this.thetaValue, this.destTheta), 0.1);
            this.phyValue = lerp(Math.min(this.phyValue, this.destPhy), Math.max(this.phyValue, this.destPhy), 0.1);
        }
        else {
            this.rotation += 0.1;
        }
    }


    toggleMelt() {
        this.isMelting = !this.isMelting;
        if (this.isMelting) this.randomizeSphereVals();
        else this.resetValues();
    }

    resetValues() {
        this.bumpiness = 0;
        this.thetaValue = 0;
        this.phyValue = 0;
    }

    randomizeSphereVals() {
        this.destTheta = random(0, 10);
        this.destBump = random(0, 1.5);
        this.destPhy = random(0, 10);
    }

    //  isWithinThreshold(value1, value2, threshold) {
    //     let difference = Math.abs(value1 - value2);
    //     return difference <= threshold;
    //   }


}